package presentation;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JSplitPane;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;

import bussines.NavigationTransition;
import bussines.Node;
import bussines.WorkloadTest;

import com.mxgraph.model.mxCell;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.view.mxGraph;

public class SmallGraph extends JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * 
	 */

	private JPanel contentPane;
	private mxGraph graph;
	private mxGraphComponent graphComponent;
	private WorkloadTest wl;

	
	public mxGraphComponent getGraph(){
		graph = new mxGraph();
		wl = new WorkloadTest("smallGraph","2","serial");
		
		//start transaction (beginUpdate) must be a endUpdate
		graph.getModel().beginUpdate();
		graph.setCellsBendable(false);
		graph.setCellsCloneable(false);
		graph.setCellsDeletable(true);
		graph.setCellsDisconnectable(false);
		graph.setCellsResizable(false);
		graph.setLabelsClipped(true);
		try
		{

			//nodes
			Node nodeIn1 = new Node("id0","0.9"); wl.addInitialNavigation(nodeIn1);
			Node nodeIn2 = new Node("id1","0.1"); wl.addInitialNavigation(nodeIn2);
			Node node1 = new Node("id2"); wl.addNode(node1);
			Node node2 = new Node("id3"); wl.addNode(node2);
			Node node3 = new Node("id4"); wl.addNode(node3);
			
			//transitions
			NavigationTransition nav1 = new NavigationTransition(nodeIn1.getId(), node1.getId(), "1"); wl.addTransition(nav1);
			NavigationTransition nav2 = new NavigationTransition(nodeIn1.getId(), node1.getId(), "1"); wl.addTransition(nav2);
			NavigationTransition nav3 = new NavigationTransition(nodeIn1.getId(), node1.getId(), "0.5"); wl.addTransition(nav3);
			NavigationTransition nav4 = new NavigationTransition(nodeIn1.getId(), node1.getId(), "0.5"); wl.addTransition(nav4);
		
		
		
		
		//insert the nodes
		Object v1 = graph.insertVertex(graph.getDefaultParent(),nodeIn1.getId(),nodeIn1,10,10,50,50);
		Object v2 = graph.insertVertex(graph.getDefaultParent(),nodeIn2.getId(),nodeIn2,90,10,50,50);
		Object v3 = graph.insertVertex(graph.getDefaultParent(),node1.getId(),node1,40,80,50,50);
		Object v4 = graph.insertVertex(graph.getDefaultParent(),node2.getId(),node2,10,160,50,50);
		Object v5 = graph.insertVertex(graph.getDefaultParent(),node3.getId(),node3,90,160,50,50);
		
		
		
		//insert transitions
		graph.insertEdge(graph.getDefaultParent(),nav1.getFrom()+"-"+nav1.getTo(), nav1,v1 ,v3 );
		graph.insertEdge(graph.getDefaultParent(),nav2.getFrom()+"-"+nav2.getTo(), nav2,v2 ,v3 );
		graph.insertEdge(graph.getDefaultParent(),nav3.getFrom()+"-"+nav2.getTo(), nav3,v3 ,v4 );
		graph.insertEdge(graph.getDefaultParent(),nav4.getFrom()+"-"+nav4.getTo(), nav4,v3 ,v5 );
		}
		finally
		{
		//end transaction with endUpdate
		graph.getModel().endUpdate();
		}
		graphComponent = new mxGraphComponent(graph);
		graphComponent.setConnectable(false);
		graphComponent.setDragEnabled(false);
		
		graphComponent.getGraphControl().addMouseListener(new MouseAdapter()
		{		
			public void mousePressed(final MouseEvent e) {
				// If Right Mouse Button
				if (SwingUtilities.isRightMouseButton(e)) {
					// Find Cell in Model Coordinates
					final mxCell cell = (mxCell)graphComponent.getCellAt(e.getX(), e.getY());

					// Create PopupMenu for the Cell
					JPopupMenu menu =  new JPopupMenu();
					if(cell != null && cell.isVertex())
					{ 
					 ActionListener actionSource = new ActionListener() {
					      public void actionPerformed(ActionEvent e) {
					    	  System.out.println(cell.getId()+" is source");
					      }
					    };
					 ActionListener actionDest = new ActionListener() {
						  public void actionPerformed(ActionEvent e) {
							  System.out.println(cell.getId()+" is destination");
						   }
					 };
					 ActionListener actionEdit = new ActionListener() {
						  public void actionPerformed(ActionEvent e) {
							  System.out.println(""Edit cell: "+cell.getId());
						   }
					 };
					    JMenuItem m = new JMenuItem("Edit");
					    m.addActionListener(actionEdit);
					    m = new JMenuItem("Set as source");
					    m.addActionListener(actionSource);
					    menu.add(m);
					    m = new JMenuItem("Set as destination");	   
					    m.addActionListener(actionDest);
					    menu.add(m);

					}
					// Display PopupMenu
					menu.show(contentPane, e.getX(), e.getY());

				}
			}
			
	
		});
		
	/* graphComponent.getGraphControl().addMouseListener(new MouseAdapter()
	{	
		public void mouseReleased(MouseEvent e)
		{
			if(SwingUtilities.isLeftMouseButton(e))
			{
				Node n;
				Object cell = graphComponent.getCellAt(e.getX(), e.getY());
				
				if (cell != null)
				{
					n = wl.getNodeById(graph.getLabel(cell));
					System.out.println("node selected is: "+n.getId());
					
				}
			}
		}
	});*/
		
	return graphComponent;

	
	}
	
	
	


	/**
	 * Create the frame.
	 */
	
	
	public SmallGraph() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPane);
		
		JSplitPane splitPane = new JSplitPane();
		contentPane.add(splitPane, BorderLayout.CENTER);
		splitPane.add(getGraph(), JSplitPane.RIGHT);

		JButton boton = new JButton("New node!");
		splitPane.add(boton,JSplitPane.LEFT);
		boton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				addNode();
			}
		});
	
	}

	public void addNode()
	{
		graph.getModel().beginUpdate();
		try
		{
			graph.insertVertex(graph.getDefaultParent(),"new node","new nodew",100,100,50,50);
			
		}finally
		{
			//end transaction with endUpdate
			graph.getModel().endUpdate();
		}
	
	}
	
	
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					SmallGraph frame = new SmallGraph();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
}

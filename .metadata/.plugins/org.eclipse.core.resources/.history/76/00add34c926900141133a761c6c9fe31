package presentation;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.border.EmptyBorder;

import bussines.InitialNavigation;
import bussines.NavigationTransition;
import bussines.Node;

import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.view.mxGraph;

public class SmallGraph extends JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * 
	 */

	private JPanel contentPane;
	private mxGraph graph;
	private mxGraphComponent graphComponent;
	private List<NavigationTransition> navList;
	
	public mxGraphComponent getGraph(){
		graph = new mxGraph();
		//start transaction (beginUpdate) must be a endUpdate
		graph.getModel().beginUpdate();
		try
		{

		//nodes
		InitialNavigation nodeIn1 = new InitialNavigation("id0","0.9");
		InitialNavigation nodeIn2 = new InitialNavigation("id1","0.1");
		Node node1 = new Node("id2");
		Node node2 = new Node("id3");
		Node node3 = new Node("id4");
		
		//transitions
		NavigationTransition nav1 = new NavigationTransition(nodeIn1.getId(), node1.getId(), "1");
		NavigationTransition nav2 = new NavigationTransition(nodeIn1.getId(), node1.getId(), "1");
		NavigationTransition nav3 = new NavigationTransition(nodeIn1.getId(), node1.getId(), "0.5");
		NavigationTransition nav4 = new NavigationTransition(nodeIn1.getId(), node1.getId(), "0.5");
		
		
		navList = new ArrayList<NavigationTransition>();
		navList.add(nav1);
		navList.add(nav2);
		navList.add(nav3);
		navList.add(nav4);
		
		for(int i=0;i<navList.size();i++) System.out.println(navList.get(i).toString());
	
		
		
		//insert the nodes
		Object v1 = graph.insertVertex(graph.getDefaultParent(),nodeIn1.getId(),nodeIn1,10,10,50,50);
		Object v2 = graph.insertVertex(graph.getDefaultParent(),nodeIn2.getId(),nodeIn2,90,10,50,50);
		Object v3 = graph.insertVertex(graph.getDefaultParent(),node1.getId(),node1,40,80,50,50);
		Object v4 = graph.insertVertex(graph.getDefaultParent(),node2.getId(),node2,10,160,50,50);
		Object v5 = graph.insertVertex(graph.getDefaultParent(),node3.getId(),node3,90,160,50,50);
		
		//insert transitions
		graph.insertEdge(graph.getDefaultParent(),nav1.getFrom()+"-"+nav1.getTo(), nav1,v1 ,v3 );
		graph.insertEdge(graph.getDefaultParent(),nav2.getFrom()+"-"+nav2.getTo(), nav2,v2 ,v3 );
		graph.insertEdge(graph.getDefaultParent(),nav3.getFrom()+"-"+nav2.getTo(), nav3,v3 ,v4 );
		graph.insertEdge(graph.getDefaultParent(),nav4.getFrom()+"-"+nav4.getTo(), nav4,v3 ,v5 );
		}
		finally
		{
		//end transaction with endUpdate
		graph.getModel().endUpdate();
		}
		graphComponent = new mxGraphComponent(graph);
		graph.setLabelsClipped(false);
		
	return graphComponent;}
	
	
	
	
	


	/**
	 * Create the frame.
	 */
	
	
	public SmallGraph() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPane);
		
		JSplitPane splitPane = new JSplitPane();
		contentPane.add(splitPane, BorderLayout.CENTER);
		splitPane.add(getGraph(), JSplitPane.RIGHT);
	}

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					SmallGraph frame = new SmallGraph();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
}
